//  main.swift
//  first
//
//  Created by Даниил Асташов on 30.09.2024.
//

import Foundation

print("Hello, World!")
var age = 19
let age_new = 19
age = 18
print(age, " ", age_new)
print("мне скоро исполнится  \(age_new)")

var variableOne = 33
let variableOneCopy: Int = variableOne
print(variableOne," ", variableOneCopy)

/**Int –9223372036854775808     9223372036854775807
 Int8 –128  127
 Int16 –32768   32767
 Int32 –2147483648  2147483647
 Int64 –9223372036854775808     9223372036854775807
 
 UInt 0     18446744073709551615
 UInt8 0    255
 UInt16 0   65535
 UInt32 0   4294967295
 UInt64 0   18446744073709551615
 */

/**Все приведенные выше целочисленные типы данных — это разные типы
 данных, и значения в этих типах не могут взаимодействовать между собой напрямую.
 Все операции в Swift должны происходить между значениями одного и того же типа
 данных! Это очень важно запомнить!*/

//let someNum: Int = 12
//let anotherNum: Int8 = 14
//someNum = anotherNum // ОШИБКА: Cannot assign value of type 'Int8'
 // to type 'Int'
 // (Нельзя передать значение типа Int8 в Int)


/*Справедливости ради стоит отметить, что на самом деле приведенные далее
глобальные функции являются специальными методами-инициализаторами типов данных. Ранее
мы говорили, что любые значения — это объекты и у них существуют запрограммированные
действия — методы. У каждого типа данных есть специальный метод, называемый инициализатором. Он автоматически вызывается при создании нового объекта, а так как в результате
вызова объекта «числовой тип данных» создается новый объект — «число», то и метод-инициализатор срабатывает.
Инициализатор имеет собственное фиксированное обозначение — init, и для создания нового
объекта определенного типа данных он вызывается так:
ИмяТипаДанных.init(_:)
например:*/

let numObj = Int.init(2) // 2
let numObjj = Double.init(2.888) // (2.888
/*В результате создается константа numObj целочисленного знакового типа Int со значением 2.
С помощью вызова метода init(_:) создается новый объект, описывающий некую сущность,
которая соответствует используемому типу данных (число, строка и т. д.). Swift упрощает разработку, позволяя не писать имя метода-инициализатора:
ИмяТипаДанных(_:)
например:*/

let numObjp = Int(2) // 2
let numObjb = Double(2.888) // 2
//В результате выполнения данного кода также будет объявлена переменная типа Int со значением 2.
