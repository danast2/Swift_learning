//
//  structure.swift
//  Swift_learning
//
//  Created by Даниил Асташов on 23.10.2024.
//

import Foundation

struct ChessPlayer {
    var name: String
    var victories: UInt
}

let playerOleg = ChessPlayer.init(name: "Daniil", victories: 100)
//type(of: playerOleg) // ChessPlayer.Type

//свойства в структурах


//свойство: Any — свойство структуры, может быть произвольного типа данных
//Свойство может быть представлено как в виде переменной, так и в виде константы. Количество свойств в структуре не ограничено.
//Добавим в структуру ChessPlayer два свойства, описывающие имя и количество
//побед (name и victories) (листинг 20.4).


//Встроенный инициализатор
//Структуры, так же как и перечисления, имеют встроенный инициализатор (метод
//с именем init), который не требуется объявлять. Данный инициализатор принимает на входе значения всех свойств структуры, производит их инициализацию
//и возвращает экземпляр данной структуры (листинг 20.5).

//В результате будет создан новый экземпляр структуры ChessPlayer, содержащий
//свойства с определенными в инициализаторе значениями.
//ВНИМАНИЕ При создании экземпляра структуры всем свойствам обязательно должны быть
//инициализированы значения. Пропустить любое из них недопустимо! Если значение какого-либо
//из свойств не будет указано, Xcode сообщит об ошибке.
//Имя инициализатора (init) может быть опущено (листинг 20.6). Точно такой же
//подход вы видели при создании значений любых фундаментальных типов.


let playerOleg_new = ChessPlayer(name: "Daniil", victories: 100)

//значения свойства по умолчанию

//Для свойств могут быть заданы значения по умолчанию (листинг 20.7). При этом
//такие свойства могут быть опущены при создании нового значения данного типа
//(Swift автоматически создает новый инициализатор).


struct ChessPlayer_new {
     var name: String = "Gamer"
     var victories: UInt = 0
}

var player = ChessPlayer_new(name: "Sas")

//На рис. 20.1 изображены два разных инициализатора, доступных при создании
//экземпляра типа ChessPlayer:
// первый требует указать значение только для свойства name, так как для него
//не задано значение по умолчанию;
//332   Глава 20. Структуры
// второй требует указать оба значения


//собственные инициализаторы

//Как говорилось ранее, инициализатор — это специальный метод, который носит
//имя init. Если вас не устраивают инициализаторы, которые создаются для структур автоматически, вы можете определить собственные.
//ПРИМЕЧАНИЕ Автоматически созданные встроенные инициализаторы удаляются при объявлении первого собственного инициализатора.
//Вам необходимо придерживаться требования: «после того, как будет создан экземпляр структуры, все ее свойства должны иметь значения». Вы можете создать
//инициализатор, который принимает в качестве входного параметра значения не
//для всех свойств, тогда остальным свойствам должны быть назначены значения
//либо внутри данного инициализатора, либо через значения по умолчанию. Несмотря на то что инициализатор — это метод, он объявляется без использования
//ключевого слова func. При этом одна структура может содержать произвольное
//количество инициализаторов, каждый из которых должен иметь уникальный
//набор входных параметров. Доступ к свойствам экземпляра внутри инициализатора осуществляется с помощью оператора self. Это связано с тем, что аргумент
//функции имеет то же самое имя (name), что и свойства структуры. В случае, если
//бы аргумент и свойства имели различные имена, то использование ключевого self
//не являлось бы обязательным.
//Создадим инициализатор для структуры ChessPlayer, который принимает значение только для свойства name (листинг 20.11).




struct PlayerChess{
    var name: String = "Gamer"
    var victories: UInt8 = 8
    
    init(name: String) {
        self.name = name
    }
}


var playerHelgaPotaki = PlayerChess(name: "Ольга")
//playerHelgaPotaki.victories // 0
// следующий код вызовет ошибку
// структура больше не имеет встроенных инициализаторов
//var newPlayer = PlayerChess()


//Инициализатор принимает значение только для свойства name, при этом свойству
//victories будет проинициализировано значение по умолчанию. При создании экземпляра вам будет доступен исключительно разработанный вами инициализатор.
//Помните, что создавать собственные инициализаторы для структур не обязательно, так как они уже имеют встроенные инициализаторы.
//ВНИМАНИЕ Если экземпляр структуры хранится в константе, модификация его свойств невозможна. Если же он хранится в переменной, то возможна модификация тех свойств, которые
//объявлены с помощью оператора var.
//ВНИМАНИЕ Структуры — это типы-значения (Value type). При передаче экземпляра структуры
//от одного параметра в другой происходит его копирование. В следующем примере создаются
//два независимых экземпляра одной и той же структуры:
//var olegMuhin = ChessPlayer(name: "Олег")
//var olegLapin = olegMuhin
