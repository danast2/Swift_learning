//
//  error_handling.swift
//  Swift_learning
//
//  Created by Даниил Асташов on 27.10.2024.
//

import Foundation


//Глава 35. Обработка ошибок
//Контролируемое создание и последующая обработка ошибок — очень полезная
//возможность Swift, которую вы могли видеть и в других языках программирования. Вполне вероятно, что на начальных этапах при написании первых приложений вы не станете вдаваться в те возможности, которые описаны в этой главе. Тем
//не менее со временем вы поймете, что обработка ошибок способна значительно
//улучшить качество вашего кода.
//Обработка ошибок подразумевает реагирование на возникающие в процессе выполнения программы ошибки — вы сами создаете ошибки и описываете реакцию
//программы на них. Но здесь слово «ошибки» стоит понимать не как синтаксические ошибки кода, а как экземпляр объектного типа (обычно перечисления),
//реализующего протокол Error, который описывает конкретный тип ошибки.
//Например, ваш код производит попытку доступа к файлу — при этом возможны
//несколько вариантов:
// файл будет успешно прочитан;
// доступ к файлу будет запрещен по причине отсутствия прав;
// файл вовсе будет отсутствовать.
//Второй и третий варианты описывают ошибки (или, иными словами, исключительные ситуации, или исключения), из-за которых невозможно выполнить требуемую
//операцию. При этом реагировать на каждую из ситуаций нужно определенным
//образом: при отсутствии прав необходимо запросить их, а при отсутствии файла —
//скачать его с сервера на устройство.
//Встретившись с исключительной ситуацией, вы сможете создать специальный
//объектный тип и вынести его обработку в отдельное место в коде. Таким образом,
//программный код, который должен заниматься именно чтением файла, будет делать только это и не сможет выполнять задачи по обработке возникающих ошибок.
//Но как только возникнет ошибка, управление будет передано в специальный блок,
//где ошибка будет соответствующим образом обработана.
//Как уже было сказано, для описания ошибок обычно используются перечисления
//(enum), соответствующие протоколу Error. Каждый член перечисления указывает
//на один конкретный тип ошибки. При обработке возникшей исключительной ситуации вы можете проанализировать экземпляр объектного типа, определить, какой
//именно член перечисления передан, и понять, какая ошибка возникла.


//Если вернуться к примеру с чтением файла, то перечисление с ошибками могло
//бы выглядеть так, как показано в листинге 35.1.
//Листинг 35.1
enum FileError: Error {
 // файл не существует
 case notExists
 // нет прав доступа
 case notRights
}
