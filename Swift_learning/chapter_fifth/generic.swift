//
//  generic.swift
//  Swift_learning
//
//  Created by Даниил Асташов on 26.10.2024.
//

import Foundation


//Глава 34. Универсальные
//шаблоны (Generic)
//Функции и объектные типы (перечисления, структуры и классы) предназначены
//для того, чтобы писать хороший код, который можно многократно использовать
//и при необходимости расширять. По большому счету, вся суть этих функциональных элементов сводится к улучшению качества кода. Действительно, зачем десять
//раз повторно реализовывать загрузку требуемых значений из базы данных, когда
//можно создать функцию и при необходимости вызывать ее. Универсальные шаблоны
//(generic, или дженерик) предназначены для того, чтобы сделать ваш код еще более
//качественным: вы сможете писать меньше кода, получая тот же самый результат.


//ПРИМЕЧАНИЕ Чтобы глубоко понять и начать применять универсальные шаблоны, потребуется время. Не ограничивайтесь изучением материала этой книги, ищите новые источники знаний и уделите дженерикам пристальное внимание, так как они способны значительно
//улучшить ваш код.
//Универсальные шаблоны в Swift представлены тремя базовыми элементами:
// универсальные функции;
// универсальные протоколы;
// универсальные объектные типы.
//В этой главе мы подробно разберем каждый из них.



//34.1. Зачем нужны дженерики
//С помощью универсальных шаблонов вы сможете реализовывать очень гибкие
//конструкции без привязки к конкретным типам данных. На самом деле вы уже
//давно работаете с дженериками, вероятно, даже не подозревая об этом. К ним,
//например, относятся массивы, множества и словари, элементами которых могут
//выступать значения различных типов.
//Рассмотрим следующий пример.
//У вас есть два параметра типа Int. Перед вами стоит задача написать код, меняющий значения данных параметров между собой. Каким образом лучше решить
//эту задачу? Вероятно, написать функцию (листинг 34.1).


var first = 3
var second = 5
func change(a: inout Int, b: inout Int) {
 let tmp = first
 first = second
 second = tmp
}
//change(a: &first, b: &second)
//first // 5
//second // 3
