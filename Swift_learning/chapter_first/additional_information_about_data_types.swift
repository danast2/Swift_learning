//
//  additional_information_about_data_types.swift
//  Swift_learning
//
//  Created by Даниил Асташов on 04.10.2024.
//

import Foundation

func new_add(myVar: Int) -> Int{
    //var intVar = 18

    /*Для параметра intVar неявно (на основании его значения) определен тип данных
     Int. Чтобы убедиться в этом, сделайте следующее:
     h Зажмите клавишу Option на клавиатуре.
     h Наведите указатель мыши на название параметра intVar. При этом вместо
     стрелочки вы должны увидеть знак вопроса.
     h Щелкните левой кнопкой мыши.
     В появившемся всплывающем окне вы можете найти справочную информацию
     о параметре, включая и указание его типа данных (рис. 2.6).*/

    //let myVar = 4.66
    print(type(of: myVar))
    return myVar
}

func new_add_without_external_name(_ myVar_n: Int) -> Int{
    //var intVar = 18

    /*Для параметра intVar неявно (на основании его значения) определен тип данных
     Int. Чтобы убедиться в этом, сделайте следующее:
     h Зажмите клавишу Option на клавиатуре.
     h Наведите указатель мыши на название параметра intVar. При этом вместо
     стрелочки вы должны увидеть знак вопроса.
     h Щелкните левой кнопкой мыши.
     В появившемся всплывающем окне вы можете найти справочную информацию
     о параметре, включая и указание его типа данных (рис. 2.6).*/

    //let myVar = 4.66
    print(type(of: myVar_n))
    return myVar_n
}

func some_add(){
    //"string1" < "string2" // true
    //true < false // error: Binary operator '<' cannot be applied
     /*to two 'Bool' operands
    Как видно из результата, тип данных String является сопоставимым, а Bool — нет
    (выражение вызвало ошибку).
    С помощью разделения типов по категориям можно задать требования к обрабатываемым данным. К примеру, вы можете создать специальную функцию,
    рассчитывающую квадрат переданного числа, а в качестве требования к входному
    аргументу жестко определить возможность передачи значений только числового
    типа (категория Numeric).*/
    let stringForHash = "Строка текста"
    let intForHash = 23
    let boolForHash = false
    var a = stringForHash.hashValue // 109231433150392402
    var b = intForHash.hashValue // 5900170382727681744
    let c = boolForHash.hashValue // 820153108557431465
    /*Значения, возвращаемые свойством hashValue, в вашем случае будут отличаться
     (а также будут изменяться при каждом новом исполнении кода). Это связано
     112   Глава 2. Фундаментальные типы данных
     с тем, что для высчитывания хеша используются переменные параметры вроде
     текущего времени.*/
}
