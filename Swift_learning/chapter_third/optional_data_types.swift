//
//  optional_data_types.swift
//  Swift_learning
//
//  Created by Даниил Асташов on 11.10.2024.
//

import Foundation


/**Опциональные типы данных, также называемые опционалами, — это особый тип,
 который говорит о том, что параметр либо имеет значение определенного типа,
 либо вообще не имеет никакого значения. Иногда очень полезно оперировать отсутствием значения.*/
var sas_new : String?

let possibleString = "1945"
let convertPossibleString = Int(possibleString) // 1945
let unpossibleString = "Одна тысяча сто десять"
let convertUnpossibleString = Int(unpossibleString) // nil

/**Самое интересное, что в обоих случаях (и при числовом, и при строковом значении переданного аргумента) возвращается значение опционального типа данных.
 То есть 1945 — это значение не целочисленного, а опционального целочисленного
 типа данных. Также и nil — в данном примере это указатель на отсутствие значения в хранилище опционального целочисленного типа.
 В этом примере функция Int(_:) возвращает опционал, то есть значение такого
 типа данных, который может либо содержать конкретное значение (целое число),
 либо не содержать совершенно ничего (nil).
 Опционалы — это отдельная самостоятельная группа типов данных. Целочисленный тип и опциональный целочисленный тип — это два совершенно разных
 типа данных. По этой причине опционалы должны иметь собственное обозначение типа. И они его имеют. Убедимся в этом, определив тип данных констант из
 предыдущего листинга (листинг 11.2).*/


//type(of: convertPossibleString) // Optional<Int>.Type
//type(of: convertUnpossibleString) // Optional<Int>.Type


/**Optional<Int> — это идентификатор опционального целочисленного типа данных,
 то есть значение такого типа может либо быть целым числом, либо отсутствовать
 полностью. Тип Int является базовым для этого опционала, то есть основан на
 типе Int.
 Более того, опциональные типы данных всегда строятся на основе базовых неопциональных. Они могут брать за основу совершенно любой тип данных, включая
 Bool, String, Float и Double, а также типы данных кортежей, ваши собственные
 типы, типы коллекций и т. д.
 Напомню, что опционалы являются самостоятельными типами, отличными от
 базовых, то есть тип Int и тип Optional<Int> — это два разных типа данных
 
 
 
 Функция Int(_:) не всегда возвращает опционал, а лишь в том случае, если
 в нее передано нечисловое значение. Так, если в Int(_:) передается значение типа Double,
 то нет никакой необходимости возвращать опционал, так как при любом значении Double оно
 может быть преобразовано в Int (чего нельзя сказать про преобразование String в Int).
 11.1. Введение в опционалы   229
 Далее показано, что приведение String и Double к Int дает значения различных типов данных
 (Optional<Int> и Int).
 let x1 = Int("12")
 type(of: x1) // Optional<Int>.Type
 let x2 = Int(43.2)
 type(of: x2) // Int.Type
 */


/*В общем случае тип данных опционала имеет две формы записи.
 СИНТАКСИС
 Полная форма записи:
 Optional<T>
 Краткая форма записи:
 T?
 T: Any — наименование типа данных, на котором основан опционал.
 При объявлении параметра, имеющего опциональный тип, необходимо явно
 указать его тип данных. Для этого можно использовать полную форму записи.
 В листинге 11.3 приведен пример объявления переменной опционального типа,
 основанного на Character.
 Листинг 11.3
 let optionalChar: Optional<Character> = "a"
 При объявлении опционала Swift также позволяет использовать сокращенный
 синтаксис. Для этого в конце базового типа необходимо добавить знак вопроса, никаких других элементов не требуется. Таким образом, тип Optional<Int>
 может быть переписан в Int?, Optional<String> в String? и в любой другой тип.
 В листинге 11.4 показан пример объявления опционала с использованием сокращенного синтаксиса.
 Листинг 11.4
 var xCoordinate: Int? = 12
 В любой момент значение опционала может быть изменено на nil. Это можно
 сделать как и при объявлении параметра, так и потом (листинг 11.5).
 Листинг 11.5
 xCoordinate // 12
 xCoordinate = nil
 xCoordinate // nil
 Переменная xCoordinate является переменной опционального целочисленного
 типа данных Int?. Изначально ей было присвоено значение, соответствующее
 базовому для опционала типу данных, которое позже было заменено на nil (то есть
 значение переменной было уничтожено).
 
 
 Листинг 11.6
 var someOptional: Bool? // nil
 Для создания опционала помимо явного указания типа также можно использовать функцию Optional(_:), в которую необходимо передать инициализируемое
 значение требуемого базового типа (листинг 11.7).
 Листинг 11.7
 // опциональная переменная с установленным значением
 var optionalVar = Optional("stringValue") // "stringValue"
 // уничтожаем значение опциональной переменной
 optionalVar = nil // nil
 type(of: optionalVar) // Optional<String>.Type
 Так как в функцию Optional(_:) в качестве аргумента передано значение
 типа String, то возвращаемое ею значение имеет опциональный строковый тип
 данных String? (или Optional<String>, что является синонимами).
 
 
 //опционалы в кортежах
 Так как в качестве базового для опционалов может выступать любой тип данных,
 вы можете использовать в том числе и кортежи. В листинге 11.8 приведен пример
 объявления опционального кортежа.
 Листинг 11.8
 var tuple: (code: Int, message: String)? = nil
 tuple = (404, "Page not found") // (code 404, message "Page not found")
 В этом примере опциональный тип основан на типе кортежа (Int, String).
 При необходимости вы можете использовать опционал для отдельных элементов
 кортежей (листинг 11.9).
 Листинг 11.9
 let tupleWithoptelements: (Int?, Int) = (nil, 100)
 tupleWithoptelements.0 // nil
 tupleWithoptelements.1 // 100
 
 
 //извлечение опционального значения
 Важно отметить, что нельзя производить прямые операции между значениями
 опционального и базового типов данных, так как это приведет к ошибке (листинг 11.10).
 11.2. Извлечение опционального значения   231
 Листинг 11.10
 let a: Int = 4
 let b: Int? = 5
 a+b // ОШИБКА. Несоответствие типов
 В переменной a хранится значение неопционального типа Int, в то время как
 значение b является опциональным (Int?).
 Типы Int? и Int, String? и String, Bool? и Bool — все это разные типы данных.
 Для решения проблемы их взаимодействия можно применить прием, называемый
 извлечением опционального значения, или, другими словами, преобразовать
 опционал в соответствующий ему базовый тип.
 Выделяют три способа извлечения опционального значения:
  принудительное извлечение;
  косвенное извлечение;
  операция объединения с nil (рассматривается в конце главы).
 После извлечения значение опционального типа приводится к базовому, а значит, может взаимодействовать с другими значениями базового типа. Рассмотрим
 каждый из указанных способов подробнее.
 */
