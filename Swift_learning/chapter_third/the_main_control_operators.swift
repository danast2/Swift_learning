//
//  the_main_control_operators.swift
//  Swift_learning
//
//  Created by Даниил Асташов on 11.10.2024.
//

import Foundation

//утверждения
/*Swift позволяет прервать выполнение программы в случае, когда некоторое условие не выполняется: к примеру, если значение переменной отличается от требуемого. Для этого предназначен специальный механизм утверждений (assertions).
 Утверждения в Swift реализованы в виде глобальной функции assert(_:_:).*/
// утверждение с двумя аргументами
//assert( someVar > 100, "Данные неверны" )
// утверждение с одним аргументом
//assert( anotherVar <= 10 )

let strName = "Дракон"
let strYoung = "молод"
let strOld = "стар"
let strEmpty = " "
var dragonAge = 230
//assert( dragonAge <= 235, strName+strEmpty+strOld )
//assert( dragonAge >= 225, strName+strEmpty+strYoung )
//print("Программа успешно завершила свою работу")


var dragonAge_new = 220
//assert( dragonAge_new <= 235, strName+strEmpty+strOld )
//assert( dragonAge_new >= 225, strName+strEmpty+strYoung )
//print("Программа успешно завершила свою работу")
//Консоль
//Assertion failed: Дракон молод


//опрератор if

/*Оператор условия if имеет четыре формы записи, различающиеся по синтаксису
 и функциональным возможностям:
  сокращенная;
  стандартная;
  расширенная;
  тернарная*/

//сокращенный синтаксис
/*if userName == "Alex" {
 print("Привет, администратор")
}*/

// переменная типа Bool
var logicVar = true
// проверка значения переменной
//10.2. Оператор условия if   191
/*if logicVar == true {
 print("Переменная logicVar истинна")
}*/

/*if logicVar {
 print("Переменная logicVar истинна")
}*/

/*logicVar = false
if logicVar {
 print("Переменная logicVar истинна")
}
// вывод на консоли пуст
Swift — это язык со строгой типизацией. Любое проверяемое выражение обязательно должно возвращать либо true, либо false, и никак иначе. По этой причине если оно возвращает значение другого типа, то Xcode сообщит об ошибке
(листинг 10.6).
Листинг 10.6
var intVar = 1
if intVar { // ОШИБКА
}
*/

//стандартный синтаксис опреатора if

/*if userName == "Alex" {
 print("Привет, администратор")
} else {
 print("Привет, пользователь")
}*/

/*// переменная типа Bool
 var logicVar = false
 // проверка значения переменной
 if logicVar {
  print("Переменная logicVar истинна")
 } else {
  print("Переменная logicVar ложна")
 }*/

//расширенный синтаксис оператора if
/*/
if userName == "Alex" {
 print("Привет, администратор")
} else if userName == "Bazil" {
 print("Привет, модератор")
} else if userName == "Helga"{
 print("Привет, редактор")
} else {
 print("Привет, пользователь")
}
*/




/*
if (..<5).contains(tenantCount) {
 rentPrice = 1000
} else if (5...7).contains(tenantCount) {
 rentPrice = 800
} else if (8...).contains(tenantCount) {
 rentPrice = 500
}
*/


//тернарный опрератор условия

/*Swift позволяет значительно упростить стандартную форму записи оператора if всего до нескольких символов. Данная форма называется тернарным
 оператором условия. Его отличительной особенностью является то, что он не
 просто выполняет соответствующее выражение, но и возвращает результат его
 работы.*/


/*проверяемое_выражение ? выражение_1 : выражение_2
 проверяемое_выражение -> Bool — вычисляемое выражение, на основании значения
 которого принимается решение об исполнении кода, находящегося в блоке.
 выражение_1 -> Any — выражение, значение которого будет возвращено, если проверяемое
 выражение вернет true.
 выражение_2 -> Any — выражение, значение которого будет возвращено, если проверяемое
 выражение вернет false.
 При истинности проверяемого выражения выполняется первый блок кода. В ином случае
 выполняется второй блок. При этом тернарный оператор не просто выполняет код в блоке,
 но возвращает значение из него.*/

var x = 44
let y = ( x > 100 ? 100 : 50 )


let a = 1
let b = 2
// сравнение значений констант
//a <= b ? print("A меньше или равно B") : print("A больше B")


/*// переменная типа Int
 var height = 180
 // переменная типа Bool
 var isHeader = true
 // вычисление значения константы
 let rowHeight = height + (isHeader ? 20 : 10 )
 // вывод значения переменной
 rowHeight // 200*/

/**ПРИМЕЧАНИЕ Отдельные выражения внутри проверяемого выражения могут быть отделены
 не только логическими операторами || и &&, но и с помощью запятой (,). Она с логической
 точки зрения работает как &&, то есть если одно из условий false, то общий результат проверки также будет false.
 let a = Int.random(in: 1...100)
 let b = Int.random(in: 1...100)
 // вариант 1 (с И)
 if a > 50 && b > 50 {
  print("a and b > 50")
 }
 // вариант 2 (c запятой)
 if a > 50, b > 50 {
  print("a and b > 50")
 }
 При этом использование запятой имеет несколько особенностей:
 • Вычисление значения выражений происходит по порядку, и если одно из выражений не
 истинно (false), то последующие подвыражения вычисляться не будут.
 • Результаты вычисления каждого подвыражения могут быть использованы в последующих
 подвыражениях.
 В следующем примере используются опционалы, изучению которых будет посвящена следующая
 глава. В нем результаты вычислений первого и второго подвыражений используются в третьем/
if let a = Int("43"), let b = Int("45"), a < b {
 print("a < b")
}*/
