//
//  lazy_calculations.swift
//  Swift_learning
//
//  Created by Даниил Асташов on 22.10.2024.
//

import Foundation


//понятие ленивых вычислений

//«Ленивый» в Swift звучит как lazy. Можно сказать, что lazy — синоним производительности. Хорошо оптимизированные программы практически всегда используют
//ленивые вычисления. Возможно, вы работали с ними и в других языках. В любом
//случае внимательно изучите приведенный далее материал.
//В программировании ленивыми называются такие элементы, вычисление значений которых откладывается до момента обращения к ним. Таким образом, пока
//значение не потребуется и не будет использовано, оно будет храниться в виде
//сырых исходных данных. С помощью ленивых вычислений достигается экономия
//процессорного времени, то есть компьютер не занимается ненужными в данный
//момент вычислениями.
//Существует два типа ленивых элементов:
// lazy-by-name — значение элемента вычисляется при каждом обращении к нему;
// lazy-by-need — элемент вычисляется один раз при первом обращении к нему,
//после чего фиксируется и больше не изменяется.
//Swift позволяет работать с обоими типами ленивых элементов, но в строгом соответствии с правилами.


//замыкания в ленивых вычислениях

//С помощью замыканий мы можем создавать ленивые конструкции типа lazy-byname, значение которых высчитывается при каждом обращении к ним.
//Рассмотрим пример из листинга 15.1.


