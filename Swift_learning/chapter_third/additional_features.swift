//
//  additional_features.swift
//  Swift_learning
//
//  Created by Даниил Асташов on 21.10.2024.
//

import Foundation

//14.1. Метод map(_:)
//Метод map(_:) позволяет применить переданное в него замыкание для каждого
//элемента коллекции. В результате его выполнения возвращается новая последовательность, тип элементов которой может отличаться от типа исходных элементов
//(рис. 14.1)

let myArr = [2, 4, 5, 7]
var newArr = myArr.map{$0}
//newArray // [2, 4, 5, 7]


//Метод map(_:) принимает замыкание и применяет его к каждому элементу массива myArray. Переданное замыкание {$0} не производит каких-либо действий
//над элементами, поэтому результат, содержащийся в переменной newArray, не
//отличается от исходного.
//ПРИМЕЧАНИЕ В данном примере используется сокращенное имя параметра, а именно $0.
//Данная тема была изучена в главе, посвященной замыканиям. Давайте повторим, каким образом
//функция map(_:) лишилась круглых скобок и приобрела вид map{$0}.
//Метод map(_:) позволяет передать в него замыкание, которое имеет один входной параметр того
//же типа, что и элементы обрабатываемой коллекции, а также один выходной параметр. Если не
//использовать сокращенный синтаксис, то вызов метода будет выглядеть следующим образом:
// let array = [2, 4, 5, 7]
// var newArray = array.map({
// (value: Int) -> Int in
// return value
// })
//Замыкание никак не изменяет входной параметр, просто возвращает его.


//Оптимизируем замыкание:
// сократим код перед ключевым словом in, так как передаваемое замыкание
//имеет всего один входной параметр;
// уберем круглые скобки, так как метод map(_:) имеет один входной параметр;
// уберем оператор return, так как тело замыкания помещается в одно выражение.
//В результате получим следующий код:
// var newArray = array.map{value in value}
//Теперь можно убрать ключевое слово in и заменить value на сокращенное имя $0:
// var newArray = array.map{$0}
//Изменим замыкание так, чтобы map(_:) возводил каждый элемент в квадрат
//(листинг 14.2).


var newArr_new = newArr.map{$0*$0}
//newArr_new // [4, 16, 25, 49]


//Как говорилось ранее, тип значений результирующей последовательности может
//отличаться от типа элементов исходной последовательности. Так, например, в ли-
//14.3. Метод flatMap(_:)   281
//стинге 14.3 количество элементов массивов intArray и boolArray одинаково, но
//тип элементов различается (Int и Bool соответственно).
//Листинг 14.3
let intArray = [1, 2, 3, 4]
let boolArray = intArray.map{$0 > 2}
//boolArray // [false, false, true, true]


//Каждый элемент последовательности сравнивается с двойкой, в результате чего
//возвращается логическое значение.
//Вы можете обрабатывать элементы коллекции с помощью метода map(_:) произвольным образом, к примеру, в листинге 14.4 показан пример создания многомерного массива на основе базового.

let numbers = [1, 2, 3, 4]
let mapped = numbers.map { Array(repeating: $0, count: $0) }
//mapped // [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]

//Метод map(_:) позволяет обрабатывать элементы любой коллекции, в том числе
//и словаря. В листинге 14.5 показан пример перевода расстояния, указанного
//в милях, в километры.

let milesToDest = ["Moscow":120.0,"Dubai":50.0,"Paris":70.0]
let kmToDest = milesToDest.map { name, miles in [name:miles * 1.6093] }
//kmToDest // [["Dubai": 80.465], ["Paris": 112.651], ["Moscow": 193.116]]


// Метод mapValues(_:)

//Метод mapValues(_:) позволяет обработать значения каждого элемента словаря,
//при этом ключи элементов останутся в исходном состоянии (листинг 14.6).


let mappedCloseStars = ["Proxima Centauri": 4.24, "Alpha Centauri A": 4.37]
let newCollection = mappedCloseStars.mapValues{ $0+1 }
//newCollection // ["Proxima Centauri": "5.24", "Alpha Centauri A": "5.37]



//Метод flatMap(_:)

//Метод flatMap(_:) отличается от map(_:) тем, что всегда возвращает плоский одномерный массив. Так, пример, приведенный в листинге 14.4, но с использованием
//flatMap(_:), вернет одномерный массив (листинг 14.7).
//Листинг 14.7


let numbersArray = [1, 2, 3, 4]
let flatMapped = numbersArray.flatMap { Array(repeating: $0, count: $0) }


//flatMapped // [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]

//Вся мощь flatMap(_:) проявляется тогда, когда в многомерном массиве требуется
//найти все попадающие под некоторое условие значения (листинг 14.8).
